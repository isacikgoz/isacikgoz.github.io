<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Farewell 2018</title>
      <link href="/2019/01/01/farewell-2018/"/>
      <url>/2019/01/01/farewell-2018/</url>
      <content type="html"><![CDATA[<p>It’s been a quite busy year. And I think a summary of 2018 would be nice to keep things together. Recap is a good opportunity to log what you’ve done for a year loop. Before starting I would like to thank my wife for her great support throughout the year. At the time of writing this our son is 14 months old and he is growing like the speed of a rocket. A lot of things to tell about him but it is a topic of another story. So here we go.</p><h3 id="Travel"><a href="#Travel" class="headerlink" title="Travel"></a>Travel</h3><p>First, I’ve been in Izmir for a conference presentation. It is a beautiful city in Turkey’s west coast. The conference was on studies of signal processing and applications. Me and my colleague prepared a study on application of dynamic time warping technique on satellite imagery to achieve fast band registration operation. Other friends from my office were there too, so we had great time for 3 days.<br>Right after Izmir, I’ve been to Beijing China for a meeting coordinated by APSCO(Asia-Pacific Space Cooperation Organization). We have reviewed the requirements and the project plan of Data Sharing Service Platform Phase Two. It is a great project and as a consequence it is an opportunity for member states to exchange their satellite imagery. To be honest, I was not expecting Beijing to be a city that you can enjoy too much. It exceeded my expectations and we had great time after the meeting. Here is a photo that I took while visiting the Great Wall.<br><img src="/images/china.jpg" alt="china"><br>In the middle of summer we visited Istanbul for wedding of my friends Selim and Mine. We took the opportunity and visited some historic landmarks that we never seen before. Also, in Istanbul there are many coffee shops to have a good cup of coffee. We visited some of them but couldn’t manage to visit all of the shops on our list. Next time I plan to spare more time for coffee shops.</p><p><img src="/images/istanbul.jpg" alt="Istanbul"><br>This year while we were visiting the hometown of my wife, we also decided to visit Gaziantep for a gastronomy tour. It was always a dream for me to visit there for just “eating”. Also, we have visited the Zeugma Mosaic Museum which was very interesting for me. The foods in Gaziantep were so delicious and I guess I gained approximately 1kg after that visit. </p><h3 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h3><p>This year, the project I currently work on had several milestones and we have successfully managed to complete our tasks. We finalized the preliminary designs and prepare the interface documents of our subsystem. We squeeze in two extensive project review meetings and had no major problems. To achieve this we worked as a team and it is an outcome of devotion. There are a lot of work to do in 2019 so that we can finish our software and test it before the satellite sent to orbit in late 2020. I hope this year I can find much more time to gather some writings about our software design.<br>Also, I evangelize Linux to my colleagues and I convinced at least 5-6 of my friends this year to use Linux as their main operating system for development. With this I cross over again on basic concepts of Unix operating systems in order to assist them while they migrate to Linux. </p><h3 id="Side-Projects"><a href="#Side-Projects" class="headerlink" title="Side Projects"></a>Side Projects</h3><p>At the beginning of this year I was planning to buy a used car and I decided to use my software skills to classify car adverts in sahibinden.com. The project was far bigger than I thought and at some point I quit working on it. Fortunately I learned Scrapy framework for website scraping and had a lot of fun while reading the adverts. It was very hard to understand those adverts moreover I would teach computer to understand.<br>After some time I started to think about learning something new. But I haven’t got an idea to work on. Some time around November I decided to do a script that run <code>git pull</code> command for all of my git repositories. But my requirements were a little complex for a single script so I decided to create a tool that fits into my needs. I was always planning to do something with Go therefore I choose Go as programming language of my brand new side project. I named it as “gitbatch” which seemed relevant for the capability of the app. The project can be found on <a href="https://github.com/isacikgoz/gitbatch" target="_blank" rel="noopener">github</a>. It took attention from the community and became the most trending project written with Go at the end of 2018. I was not expecting this level of impact and it made me very happy. No doubt I will continue to improve it in 2019.</p><p><img src="/images/side-prject.jpg" alt="screen"><br>While developing gitbatch, an idea come into my mind to create a helper tool for Unix commands. There is a project called <a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">tldr</a>, It is a community driven project to simplfy man pages and give a few examples of usage of a command. And there are many clients to use those information with command line interface. I developed a fully featured interactive client named <a href="https://github.com/isacikgoz/tldr" target="_blank" rel="noopener">tldr++</a> and it also become the most popular client in only 10 days. It is even more popular than tldr’s official client.<br>It was a very successful year for my side projects and I am very happy to play with Go and love the Go community. I would like to thank my friend Fatih Arslan for his support too.</p><h3 id="Walking"><a href="#Walking" class="headerlink" title="Walking"></a>Walking</h3><p>Not surprisingly year 2018 is no different than 2017 or 2016 in terms of my daily walking activity. Since February 2016 I am walking at least ~6 kilometers per day. Sometimes it can climb up to 10 kilometers. Since my office is located in Middle East Technical University, it is a great opportunity for walks. Here are some nature photos that I occasionally come across.<br><img src="/images/metu-collage.jpg" alt="metu"><br><em>I would like to hear your thoughts about this post. If you want to share with me, you can find me on <a href="https://twitter.com/isacikgoz" target="_blank" rel="noopener">twitter</a>.</em></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>The Go effect after 7 years with Java</title>
      <link href="/2018/12/31/golang/"/>
      <url>/2018/12/31/golang/</url>
      <content type="html"><![CDATA[<p>Recently, I’ve been working on some side projects to improve my Go skills. Since I have some close friends who are very active with Go, I was stoically observing their work along with the Go community. Hence, it was always an interesting topic for me. I don’t know when the exact time the spark is flamed but I found myself working on these side project after I came home from work till midnight. For a quick info, I’ve been working as a software engineer on a satellite ground station project. And I don’t have a single bit related to Go in my professional career. We use java, c++ and occasionally python.</p><p>So let’s return to the topic; the effect beneath Go. As far as I can see, Go is complicated at the begining if you have a solid java-style background. The language itself has a little awkward syntax. But in time, eventually, you are getting used to it. If I supposed to compare it with java, for a public function(method) you write;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> string <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Go on the other hand;<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyStruct)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> m.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>As you can see, even with the simplest code snippets, with a java point of view, it is not so easy to get used to this syntax. But this is the initial feeling though. Also, lack of object-oriented paradigms such as inheritance etc. makes you look at the computer screen meaningless. So I thought that it would be a better practice to see other peoples work and try to understand how they use the the language in real life problems. I visited many open source Go projects and noticed that Go developers write code with the shortest possible variable names, shortest possible function names. Java devs on the other hand, tend to be more verbose. Java-like coding is like writing a literature book. Reading java code requires less learning curve. Go; hard to start easy to sustain. At the begining I was struggling to understand the code snippets but now I’m getting used to it. I’m sure that there are many writings about how Go has different syntax than X language or differences between functional programming and object-orinted programming. This comparison is a little out of my topic but still worth to mention a little.</p><p>My verdict on Go is that it is far more practical when it comes to create “something”. I mean, you have an idea, you want to see quick results without concerning code-style or any architectural things, Go gives you the oppurtinty to do your job swiftly. Not much boilerplates. Once you create the “thing”, you see that the program is actually fast, reliable and easy to distribute. You don’t need much effort to turn it into an actual product. I had an idea of making a Go client of <a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">tldr-pages</a>. Altough there are plenty of same clients, I had a different idea to make it more and more user-friendly. It didn’t take more than 3 nights to create minimum viable product. When I published the pre-release version at third night, the repository had 9 commits and roughly 700 lines of code. It was nearly a ready product and when I showcased in some subreddits such as r/linux or r/golang it quickly took attention. It was very easy to create executable binaries via go build, so I wrote a bash script to create binaries for every mainstream platform and architecture. The script also compresses the files, runs a sha256 checksum and writes to a file. The <a href="https://gist.github.com/isacikgoz/72bf1c48728cded3230023d20ebd7069" target="_blank" rel="noopener">script</a> is also 40 lines of code. The project development was blazing fast, I had an idea and created a tool that is actually distributable and had positive feedback from the community. And I was not the pioneer of the idea of tldr-pages. Maybe the 50. client.</p><p>So what about the actual product? (<a href="https://github.com/isacikgoz/tldr" target="_blank" rel="noopener">tldr++</a>) It is easily integrated to CI process, adopted from community and become a very user-friendly client. Also, performance-wise it is the fastest client. And offers much more functionality than others. The actual performance results are shown in the table below:</p><table><thead><tr><th>benchmarking</th><th>Go</th><th>C++</th><th>Rust</th><th>bash</th><th>node</th></tr></thead><tbody><tr><td></td><td><a href="https://github.com/isacikgoz/tldr" target="_blank" rel="noopener">tldr++</a></td><td><a href="https://github.com/tldr-pages/tldr-cpp-client" target="_blank" rel="noopener">cpp-client</a></td><td><a href="https://github.com/dbrgn/tealdeer" target="_blank" rel="noopener">tealdeer</a></td><td><a href="https://github.com/raylee/tldr" target="_blank" rel="noopener">tldr</a></td><td><a href="https://github.com/tldr-pages/tldr-node-client" target="_blank" rel="noopener">node-client</a></td></tr><tr><td>time</td><td>5.273 ms</td><td>6.468 ms</td><td>11.59 ms</td><td>77.13 ms</td><td>415.9 ms</td></tr><tr><td></td><td>0.973 R²</td><td>0.937 R²</td><td>0.971 R²</td><td>0.815 R²</td><td>0.997 R²</td></tr><tr><td>mean</td><td>6.247 ms</td><td>5.889 ms</td><td>11.39 ms</td><td>59.26 ms</td><td>396.1 ms</td></tr><tr><td>std dev</td><td>1.203 ms</td><td>930.1 μs</td><td>1.170 ms</td><td>17.87 ms</td><td>15.89 ms</td></tr><tr><td>variance introduced by outliers</td><td>86%</td><td>78%</td><td>52%</td><td>81%</td><td>19%</td></tr><tr><td>app version</td><td>v 0.3</td><td>v 1.3.0</td><td>v 1.1.0</td><td>-</td><td>v 3.2.6</td></tr><tr><td>lines of code</td><td>~1.1K</td><td>~2.5K</td><td>~3K</td><td>~300</td><td>~4.5K</td></tr></tbody></table><p><br><br>bench v 1.0.12 is used for benchmarking and hardware details are: </p><ul><li>cpu: Intel(R) Xeon(R) CPU E5-2637 v2 @ 3.50GHz,</li><li>ram: 128GB DDR3 RAM,</li><li>disk: SSD, 550/500(r/w)</li></ul><p>As a matter of fact, tldr++ is being the one of the most popular client right now. For this amount of time its success means a lot to me. You can see its growth of popularity in time below.<br><a href="https://starcharts.herokuapp.com/isacikgoz/tldr" target="_blank" rel="noopener"><img src="https://starcharts.herokuapp.com/isacikgoz/tldr.svg" alt="Stargazers over time"></a></p><p>I really enjoyed working with Go and had pure satisfaction of creating something at this speed. Now, I have two side-projects with Go and I’m counting time to get home and work on them. I would like to thank to Go communtiy to make this happen.</p><p>tldr; if you have an idea, with the momentum of its community Go is a great tool to make it happen swiftly!</p><p><em>I would like to hear your thoughts about this post. If you want to share with me, you can find me on <a href="https://twitter.com/isacikgoz" target="_blank" rel="noopener">twitter</a>.</em></p>]]></content>
      
      
    </entry>
    
  
  
</search>
